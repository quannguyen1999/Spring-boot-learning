spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=social
    username: postgres
    password: Khanhhoa123@
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL10Dialect
        jdbc:
          lob:
            non_contextual_creation: true

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 784844007270-9ps7btveioqc7abg516ra8ton0fgcafc.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: 4691898614241341
            clientSecret: 10d1550131c6d001d6501ea1515d5728
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}" # Note that facebook now mandates the use of https redirect URIs, so make sure your app supports https in production
            scope:
              - email
              - public_profile
logging:
  level:
    org:
      hibernate: INFO
      springframework:
        ws: TRACE
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
